;;; usei o
;  auto-complete      
;  auto-complete-c-headers 
;  flycheck           
;  flycheck-google-cpplint
;  flycheck-haskell
;  google-c-style     
;  haskell-mode       
;  iedit              
;  planet-theme       
;  rainbow-delimiters 
;  slime              
;  yasnippet 

(setq inhibit-startup-message t)

;; iniciando package.el com o emacs
(require 'package)
;; inicializando pacotes
(package-initialize)
;; start auto-complete with emacs
(require 'auto-complete)
;; auto complete por padrao
(require 'auto-complete-config)
(ac-config-default)
;; start yasnippet with emacs
(require 'yasnippet)
(yas-global-mode 1)

;;; ------------ IDo -------------------

;; IDo everywhere
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;; Find File At Point
(setq ido-use-filename-at-point 'guess)

;; Eliminating Obstacles
(setq ido-create-new-buffer 'aways)
(setq ido-file-extensions-order '(".org" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))

;; Ignorance is Bliss
(setq ido-ignore-extensions t)
;;; -------------------- Fim IDo --------------------------------

;; cor parenteses
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

;; ------------- TRETAS C/C++ ----------------------------- ;;

;; definindo funcao para inicializar auto-complete-c-header e obter o c-c++ hook
(defun my:ac-c-header-init ()
  (require 'auto-complete-c-headers)
  (add-to-list 'ac-sources 'ac-source-c-headers)
  (add-to-list 'achead:include-directories '"/usr/local/lib/gcc48/gcc/x86_64-portbld-freebsd10.3/4.8.5/include"))
;; chamando funcao de c/c++ hook
(add-hook 'c++-mode-hook 'my:ac-c-header-init)
(add-hook 'c-mode-hook 'my:ac-c-header-init)

;;; iedit
(define-key global-map (kbd "C-c ;") 'iedit-mode)

;; start flymake-google-cpplint-load
;; definindo funcao para inicializacao do flycheck
(defun my:flycheck-google-init ()
  (require 'flycheck-google-cpplint)
  (custom-set-variables 
   '(flycheck-google-cpplint-command "/usr/local/bin/cpplint"))  
  (flycheck-google-cpplint-load))
(add-hook 'c-mode-hook 'my:ac-c-header-init)
(add-hook 'c++-mode-hook 'my:ac-c-header-init)

;; start google-c-styele 
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)
;; ------------- FIM TRETAS C/C++ ------------------ ;;

;;; --- Haskell-Mode --- ;;;
(eval-after-load 'flycheck
		 '(add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))

;; intractive-haskell-mode
(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

;;; faces
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (planet)))
 '(custom-safe-themes
   (quote
    ("6d8d8af130783e4e91bfcda284ad3271e598e9e78374f5ad406ab63243e75982" default)))
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t)
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-type (quote cabal-repl))
 '(package-archives
   (quote
    (("melpa" . "http://melpa.org/packages/")
     ("gnu" . "http://elpa.gnu.org/packages/")))))

(require 'haskell)
(define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
(define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
(define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
(define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
(define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
(define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
(define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
; (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)

(define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
(define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
(define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
(define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)

;;; ---- Fim Haskell-Mode ---- ;;;

;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)
;; highlight entire bracket expression
(setq show-paren-style 'parenthesis)

;; ------------ SLIME/QUICKLISP -------------------- ;;

(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
(setq inferior-lisp-program "sbcl")

;; ------------ FIM SLIME/QUICKLISP ---------------- ;;
